from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import CallbackContext, ConversationHandler
from database import Session, Recommendation

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CATEGORY, SORTING, PAGINATION = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
CATEGORY_KEYBOARD = ReplyKeyboardMarkup([
    ["üìö –ö–Ω–∏–≥–∞", "üé¨ –§–∏–ª—å–º"],
    ["üìç –ú–µ—Å—Ç–æ", "üéµ –ú—É–∑—ã–∫–∞"]
], resize_keyboard=True, one_time_keyboard=True)

SORTING_KEYBOARD = ReplyKeyboardMarkup([
    ["üî• –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", "üï∞ –ü–æ –¥–∞—Ç–µ"]
], resize_keyboard=True, one_time_keyboard=True)

NAVIGATION_KEYBOARD = ReplyKeyboardMarkup([
    ["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥"],
    ["üé≤ –°–ª—É—á–∞–π–Ω–∞—è", "‚ùå –ó–∞–∫—Ä—ã—Ç—å"]
], resize_keyboard=True, one_time_keyboard=True)

# –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ–¥–∑–∏-–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —á–∏—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
CATEGORY_MAP = {
    "üìö –ö–Ω–∏–≥–∞": "–ö–Ω–∏–≥–∞",
    "üé¨ –§–∏–ª—å–º": "–§–∏–ª—å–º",
    "üìç –ú–µ—Å—Ç–æ": "–ú–µ—Å—Ç–æ",
    "üéµ –ú—É–∑—ã–∫–∞": "–ú—É–∑—ã–∫–∞"
}


async def cmd_list(update: Update, context: CallbackContext) -> int:
    print("cmd_list: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.")
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    context.user_data['page'] = 0  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'page' –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
    print("cmd_list: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –Ω—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.")

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=CATEGORY_KEYBOARD
    )
    return CATEGORY


async def enter_category(update: Update, context: CallbackContext) -> int:
    category_emoji = update.message.text
    print(f"enter_category: –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_emoji}")

    if category_emoji not in CATEGORY_MAP:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.",
            reply_markup=CATEGORY_KEYBOARD
        )
        return CATEGORY

    context.user_data['category'] = CATEGORY_MAP[category_emoji]
    print(
        f"enter_category: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data['category']}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    context.user_data['page'] = 0
    context.user_data['recommendations'] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = context.user_data['category']
    session = Session()
    recommendations = session.query(
        Recommendation).filter_by(category=category).all()
    session.close()

    if not recommendations:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        print("enter_category: –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    context.user_data['recommendations'] = recommendations
    print(f"enter_category: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:",
        reply_markup=SORTING_KEYBOARD
    )
    return SORTING


async def enter_sorting(update: Update, context: CallbackContext) -> int:
    sorting = update.message.text
    print(f"enter_sorting: –í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {sorting}")

    if sorting not in ["üî• –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", "üï∞ –ü–æ –¥–∞—Ç–µ"]:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.",
            reply_markup=SORTING_KEYBOARD
        )
        return SORTING

    category = context.user_data['category']
    session = Session()

    query = session.query(Recommendation).filter_by(category=category)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sorting == "üî• –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É":
        query = query.order_by(Recommendation.rating.desc())
    elif sorting == "üï∞ –ü–æ –¥–∞—Ç–µ":
        query = query.order_by(Recommendation.id.desc())

    recommendations = query.all()
    session.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    context.user_data['recommendations'] = recommendations
    context.user_data['page'] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    print(
        f"enter_sorting: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    await show_page(update, context)

    return PAGINATION


async def show_page(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    page = context.user_data['page']
    recommendations = context.user_data['recommendations']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –≤—ã–≤–æ–¥–∞
    start = page * 5
    end = start + 5
    page_recommendations = recommendations[start:end]

    print(
        f"show_page: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å {start} –ø–æ {end} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.")

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    category = context.user_data['category']
    messages = []
    for rec in page_recommendations:
        parts = [f"{rec.title} ‚Äî ‚≠êÔ∏è {rec.rating}/5"]

        if category == "–ú–µ—Å—Ç–æ":
            if rec.author:
                parts.append(f"üìç {rec.author}")
            if rec.comment:
                parts.append(f"üí¨ {rec.comment}")
        elif category == "–§–∏–ª—å–º":
            if rec.comment:
                parts.append(f"üí¨ {rec.comment}")
        else:  # –ö–Ω–∏–≥–∞ –∏–ª–∏ –ú—É–∑—ã–∫–∞
            if rec.author:
                parts.append(f"‚úçÔ∏è {rec.author}")
            if rec.comment:
                parts.append(f"üí¨ {rec.comment}")

        messages.append("\n".join(parts))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if len(recommendations) > 5:
        # –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –±–æ–ª—å—à–µ 5, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await update.message.reply_text(
            "\n\n".join(messages),
            reply_markup=NAVIGATION_KEYBOARD
        )
    else:
        # –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π 5 –∏–ª–∏ –º–µ–Ω—å—à–µ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await update.message.reply_text(
            "\n\n".join(messages),
            reply_markup=ReplyKeyboardRemove()
        )


async def navigate(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    

 # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /list, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if text == "/list":
        context.user_data.clear()
        await cmd_list(update, context)
        return CATEGORY
    print(f"navigate: –í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è: {text}")
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 0, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    page = context.user_data.get('page', 0)
    recommendations = context.user_data.get('recommendations', [])
    total_recommendations = len(recommendations)

    print(
        f"navigate: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page}, –≤—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {total_recommendations}")

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        if page > 0:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∏–¥–µ–º –Ω–∞–∑–∞–¥
            context.user_data['page'] = page - 1
            await show_page(update, context)
        else:
            # –ï—Å–ª–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await update.message.reply_text(
                "–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.",
                reply_markup=NAVIGATION_KEYBOARD
            )

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥"
    elif text == "‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥":
        if (page + 1) * 5 < total_recommendations:  # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–ø–µ—Ä–µ–¥
            context.user_data['page'] = page + 1
            await show_page(update, context)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –≤–ø–µ—Ä–µ–¥, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await update.message.reply_text(
                "–í—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.",
                reply_markup=NAVIGATION_KEYBOARD
            )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    elif text == "üé≤ –°–ª—É—á–∞–π–Ω–∞—è":
        import random
        rec = random.choice(recommendations)
        await update.message.reply_text(
            f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec.title} ‚Äî ‚≠êÔ∏è {rec.rating}/5\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {rec.comment if rec.comment else '–ù–µ —É–∫–∞–∑–∞–Ω'}",
            reply_markup=NAVIGATION_KEYBOARD
        )

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    elif text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å":
        await update.message.reply_text(
            "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    return PAGINATION
