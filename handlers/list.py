from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext, ConversationHandler
from database import Session, Recommendation

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CATEGORY, SORTING = range(2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
CATEGORY_KEYBOARD = ReplyKeyboardMarkup([
    ["üìö –ö–Ω–∏–≥–∞", "üé¨ –§–∏–ª—å–º"],
    ["üìç –ú–µ—Å—Ç–æ", "üéµ –ú—É–∑—ã–∫–∞"]
], resize_keyboard=True, one_time_keyboard=True)

SORTING_KEYBOARD = ReplyKeyboardMarkup([
    ["üî• –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", "üï∞ –ü–æ –¥–∞—Ç–µ"]
], resize_keyboard=True, one_time_keyboard=True)

# –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ–¥–∑–∏-–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —á–∏—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
CATEGORY_MAP = {
    "üìö –ö–Ω–∏–≥–∞": "–ö–Ω–∏–≥–∞",
    "üé¨ –§–∏–ª—å–º": "–§–∏–ª—å–º",
    "üìç –ú–µ—Å—Ç–æ": "–ú–µ—Å—Ç–æ",
    "üéµ –ú—É–∑—ã–∫–∞": "–ú—É–∑—ã–∫–∞"
}


async def cmd_list(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=CATEGORY_KEYBOARD
    )
    return CATEGORY


async def enter_category(update: Update, context: CallbackContext) -> int:
    category_emoji = update.message.text
    if category_emoji not in CATEGORY_MAP:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.",
            reply_markup=CATEGORY_KEYBOARD
        )
        return CATEGORY

    context.user_data['category'] = CATEGORY_MAP[category_emoji]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:",
        reply_markup=SORTING_KEYBOARD
    )
    return SORTING


async def enter_sorting(update: Update, context: CallbackContext) -> int:
    sorting = update.message.text
    if sorting not in ["üî• –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", "üï∞ –ü–æ –¥–∞—Ç–µ"]:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.",
            reply_markup=SORTING_KEYBOARD
        )
        return SORTING

    category = context.user_data['category']
    session = Session()

    query = session.query(Recommendation).filter_by(category=category)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sorting == "üî• –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É":
        query = query.order_by(Recommendation.rating.desc())
    elif sorting == "üï∞ –ü–æ –¥–∞—Ç–µ":
        query = query.order_by(Recommendation.id.desc())

    recommendations = query.limit(5).all()
    session.close()

    if not recommendations:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    messages = []
    for rec in recommendations:
        parts = [f"{rec.title} ‚Äî ‚≠êÔ∏è {rec.rating}/5"]

        if category == "–ú–µ—Å—Ç–æ":
            if rec.author:
                parts.append(f"üìç {rec.author}")
            if rec.comment:
                parts.append(f"üí¨ {rec.comment}")
        elif category == "–§–∏–ª—å–º":
            if rec.comment:
                parts.append(f"üí¨ {rec.comment}")
        else:  # –ö–Ω–∏–≥–∞ –∏–ª–∏ –ú—É–∑—ã–∫–∞
            if rec.author:
                parts.append(f"‚úçÔ∏è {rec.author}")
            if rec.comment:
                parts.append(f"üí¨ {rec.comment}")

        messages.append("\n".join(parts))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await update.message.reply_text(
        "\n\n".join(messages),
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END
