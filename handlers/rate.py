from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from database import Session, Recommendation, Rating

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CATEGORY, RECOMMENDATION, RATING = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
CATEGORY_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∞", callback_data="–ö–Ω–∏–≥–∞"),
     InlineKeyboardButton("üé¨ –§–∏–ª—å–º", callback_data="–§–∏–ª—å–º")],
    [InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ", callback_data="–ú–µ—Å—Ç–æ"), InlineKeyboardButton(
        "üéµ –ú—É–∑—ã–∫–∞", callback_data="–ú—É–∑—ã–∫–∞")]
])

RATING_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚≠êÔ∏è", callback_data="1"),
     InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è", callback_data="2")],
    [InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="3"),
     InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="4")],
    [InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="5")]
])

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏


async def cmd_rate(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=CATEGORY_KEYBOARD
    )
    return CATEGORY

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


async def enter_category(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    category = query.data

    context.user_data['category'] = category
    context.user_data['page'] = 0

    session = Session()
    recommendations = session.query(
        Recommendation).filter_by(category=category).all()
    session.close()

    if not recommendations:
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return ConversationHandler.END

    context.user_data['recommendations'] = recommendations

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton(
            rec.title, callback_data=f"recommendation:{rec.id}")]
        for rec in recommendations
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=markup
    )
    return RECOMMENDATION

# –í—ã–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏


async def enter_recommendation(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    recommendation_id = int(query.data.split(":")[1])

    context.user_data['recommendation_id'] = recommendation_id

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = Session()
    recommendation = session.query(Recommendation).filter_by(
        id=recommendation_id).first()
    session.close()

    if not recommendation:
        await query.edit_message_text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–µ–π—Ç–∏–Ω–≥
    user_id = query.from_user.id
    session = Session()
    existing_rating = session.query(Rating).filter_by(
        recommendation_id=recommendation_id, user_id=user_id).first()
    session.close()

    if existing_rating:
        await query.edit_message_text(f"–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é. –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {existing_rating.rating}‚≠ê")
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —ç—Ç–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
        reply_markup=RATING_KEYBOARD
    )
    return RATING

# –í—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞


async def enter_rating(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    rating = int(query.data)

    recommendation_id = context.user_data['recommendation_id']
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç recommendation –∏–∑ context (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞—Ä–∞–Ω–µ–µ)
    recommendation = context.user_data.get('recommendation')

    if recommendation is None:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        context.user_data.clear()
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Ä–µ–π—Ç–∏–Ω–≥ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
    if rating < 1 or rating > 5:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
        context.user_data.clear()
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫)
    new_rating = {'user_id': user_id, 'rating': rating}

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if 'ratings' not in recommendation:
        recommendation['ratings'] = []

    recommendation['ratings'].append(new_rating)

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    total_rating = sum(r['rating'] for r in recommendation['ratings'])
    rating_count = len(recommendation['ratings'])
    recommendation['average_rating'] = total_rating / rating_count
    recommendation['rating_count'] = rating_count

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    await query.edit_message_text(
        f"‚úÖ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {rating}‚≠ê\n"
        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {recommendation['average_rating']:.2f}/5 ({recommendation['rating_count']} –æ—Ü–µ–Ω–æ–∫)"
    )

    # –û—á–∏—â–∞–µ–º user_data –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    context.user_data.clear()

    return ConversationHandler.END
