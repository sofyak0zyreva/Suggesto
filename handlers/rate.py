from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from database import Session, Recommendation, Rating, User

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CATEGORY, RECOMMENDATION, RATING = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
CATEGORY_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∞", callback_data="–ö–Ω–∏–≥–∞"),
     InlineKeyboardButton("üé¨ –§–∏–ª—å–º", callback_data="–§–∏–ª—å–º")],
    [InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ", callback_data="–ú–µ—Å—Ç–æ"), InlineKeyboardButton(
        "üéµ –ú—É–∑—ã–∫–∞", callback_data="–ú—É–∑—ã–∫–∞")]
])

RATING_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚≠êÔ∏è", callback_data="1"),
     InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è", callback_data="2")],
    [InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="3"),
     InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="4")],
    [InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="5")]
])

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏


async def cmd_rate(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=CATEGORY_KEYBOARD
    )
    return CATEGORY

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


async def enter_category(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    category = query.data

    user_id = query.from_user.id
    username = query.from_user.username

    session = Session()

    user = session.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        user = User(telegram_id=user_id, username=username)
        session.add(user)
        session.commit()

    user_id = user.id
    print(f"user_id in rate: enter_category", user_id)

    context.user_data['category'] = category
    context.user_data['page'] = 0

    session = Session()
    chat = update.effective_chat
    if chat.type == "private":
        # –ª–∏—á–Ω—ã–π —á–∞—Ç: —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = session.query(Recommendation).filter_by(
            category=category,
            user_id=user_id
        ).all()
    else:
        # –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç: –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–∞—Ç–∞
        recommendations = session.query(Recommendation).filter_by(
            category=category,
            chat_id=chat.id
        ).all()
    # recommendations = session.query(
    #     Recommendation).filter_by(category=category, user_id=user_id).all()
    session.close()

    if not recommendations:
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return ConversationHandler.END

    context.user_data['recommendations'] = recommendations

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton(
            rec.title, callback_data=f"recommendation:{rec.id}")]
        for rec in recommendations
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=markup
    )
    return RECOMMENDATION

# –í—ã–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏


async def enter_recommendation(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    recommendation_id = int(query.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    context.user_data['recommendation_id'] = recommendation_id

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = Session()
    recommendation = session.query(Recommendation).filter_by(
        id=recommendation_id).first()
    session.close()

    if not recommendation:
        await query.edit_message_text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–µ–π—Ç–∏–Ω–≥
    user_id = query.from_user.id
    username = query.from_user.username

    session = Session()

    user = session.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        user = User(telegram_id=user_id, username=username)
        session.add(user)
        session.commit()
    user_id = user.id
    print(f"user_id in rate: enter_recommendation", user_id)

    session = Session()
    existing_rating = session.query(Rating).filter_by(
        recommendation_id=recommendation_id, user_id=user_id).first()
    session.close()

    if existing_rating:
        await query.edit_message_text(f"–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é. –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {existing_rating.rating}‚≠ê")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ context –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    context.user_data['recommendation'] = recommendation

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —ç—Ç–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
        reply_markup=RATING_KEYBOARD
    )
    return RATING

# –í—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞


async def enter_rating(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    rating = int(query.data)

    recommendation = context.user_data.get('recommendation')

    if recommendation is None:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        context.user_data.clear()
        return ConversationHandler.END

    user_id = query.from_user.id
    username = query.from_user.username
    recommendation_id = recommendation.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Ä–µ–π—Ç–∏–Ω–≥ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
    if rating < 1 or rating > 5:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
        context.user_data.clear()
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    session = Session()
    user = session.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        user = User(telegram_id=user_id, username=username)
        session.add(user)
        session.commit()
    user_id = user.id
    print(f"user_id in rate: enter_rating", user_id)
    new_rating = Rating(
        user_id=user_id, recommendation_id=recommendation_id, rating=rating)
    session.add(new_rating)

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    all_ratings = session.query(Rating).filter_by(
        recommendation_id=recommendation_id).all()
    total_rating = sum(rating.rating for rating in all_ratings)
    recommendation.average_rating = total_rating / len(all_ratings)
    recommendation.rating_count = len(all_ratings)

    session.commit()
    session.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await query.edit_message_text(
        f"‚úÖ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {rating}‚≠ê\n"
        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {recommendation.average_rating:.2f}/5 "
    )

    # –û—á–∏—â–∞–µ–º user_data –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    context.user_data.clear()

    return ConversationHandler.END
