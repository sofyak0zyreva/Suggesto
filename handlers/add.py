# add.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler, CallbackQueryHandler, MessageHandler, filters
from database import Session, Recommendation, User, Rating

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CATEGORY, TITLE, AUTHOR, COMMENT, RATING = range(5)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
CATEGORY_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∞", callback_data="–ö–Ω–∏–≥–∞"),
     InlineKeyboardButton("üé¨ –§–∏–ª—å–º", callback_data="–§–∏–ª—å–º")],
    [InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ", callback_data="–ú–µ—Å—Ç–æ"), InlineKeyboardButton(
        "üéµ –ú—É–∑—ã–∫–∞", callback_data="–ú—É–∑—ã–∫–∞")]
])

RATING_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚≠êÔ∏è", callback_data="1"),
     InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è", callback_data="2")],
    [InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="3"),
     InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="4")],
    [InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="5")]
])

SKIP_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")]
])

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏


async def cmd_add(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
        reply_markup=CATEGORY_KEYBOARD
    )
    return CATEGORY

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


async def enter_category(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    category = query.data

    context.user_data['category'] = category
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    )
    return TITLE

# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è


async def enter_title(update: Update, context: CallbackContext) -> int:
    title = update.message.text
    context.user_data['title'] = title

    category = context.user_data['category']

    if category == "–§–∏–ª—å–º":
        context.user_data['author'] = None
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é):",
            reply_markup=SKIP_KEYBOARD
        )
        return COMMENT
    else:
        prompt = "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):" if category in [
            "–ö–Ω–∏–≥–∞", "–ú—É–∑—ã–∫–∞"] else "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–ø–æ –∂–µ–ª–∞–Ω–∏—é):"
        await update.message.reply_text(
            prompt,
            reply_markup=SKIP_KEYBOARD
        )
        return AUTHOR

# –í–≤–æ–¥ –∞–≤—Ç–æ—Ä–∞/–∞–¥—Ä–µ—Å–∞


async def enter_author(update: Update, context: CallbackContext) -> int:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        context.user_data['author'] = None
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é):",
            reply_markup=SKIP_KEYBOARD
        )
    else:
        author = update.message.text
        context.user_data['author'] = author
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é):",
            reply_markup=SKIP_KEYBOARD
        )
    return COMMENT

# –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è


async def enter_comment(update: Update, context: CallbackContext) -> int:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        context.user_data['comment'] = None
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
            reply_markup=RATING_KEYBOARD
        )
    else:
        comment = update.message.text
        context.user_data['comment'] = comment
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
            reply_markup=RATING_KEYBOARD
        )
    return RATING

# –í—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞


async def enter_rating(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    rating = int(query.data)

    category = context.user_data['category']
    title = context.user_data['title']
    author = context.user_data['author']
    comment = context.user_data['comment']

    user_id = query.from_user.id
    print(f"user_id in add: enter_rating", user_id)
    username = query.from_user.username

    chat_id = update.effective_chat.id
    print(f"chat_id in add: enter_rating", chat_id)
    chat = update.effective_chat
    print(f"chat type in add: enter_rating", chat.type)
    session = Session()

    user = session.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        user = User(telegram_id=user_id, username=username)
        session.add(user)
        session.commit()

    recommendation = Recommendation(
        category=category,
        title=title,
        author=author,
        comment=comment,
        rating=rating,
        user_id=user.id,
        chat_id=chat_id
    )
    session.add(recommendation)
    session.commit()

    initial_rating = Rating(
        user_id=user.id,
        recommendation_id=recommendation.id,
        rating=rating
    )
    session.add(initial_rating)

    session.commit()
    session.close()

    await query.edit_message_text(
        f"‚úÖ –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"–ê–≤—Ç–æ—Ä: {author if author else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–û—Ü–µ–Ω–∫–∞: {rating}/5"
    )
    context.user_data.clear()
    return ConversationHandler.END
